using Microsoft.CodeAnalysis;
using System.Collections.Immutable;
using Microsoft.CodeAnalysis.Text;
using System.Text;
using VerifyCS = DependencyInjection.SourceGenerator.Microsoft.Tests.CSharpSourceGeneratorVerifier<DependencyInjection.SourceGenerator.Microsoft.DependencyInjectionRegistrationGenerator>;
using Microsoft.CodeAnalysis.Testing;
using DependencyInjection.SourceGenerator.Microsoft;

namespace DependencyInjection.SourceGenerator.Microsoft.Tests;

public class DependencyInjectionRegistrationGeneratorTests
{
    private static readonly string _header = """
        // <auto-generated/>
        #pragma warning disable
        #nullable enable
        
        namespace DependencyInjection.SourceGenerator.Microsoft.Demo;
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        
        """;

    private readonly ImmutableArray<string> _references = AppDomain.CurrentDomain
    .GetAssemblies()
    .Where(assembly => !assembly.IsDynamic)
    .Select(assembly => assembly.Location)
    .ToImmutableArray();

    private async Task RunTestAsync(string code, string expectedResult)
    {
        var tester = new VerifyCS.Test
        {
            TestState =
                {
                    Sources = { code },
                    GeneratedSources =
                    {
                        (typeof(DependencyInjectionRegistrationGenerator), "ServiceCollectionExtensions.g.cs",
                            SourceText.From(expectedResult, Encoding.UTF8))
                    }
                },
            ReferenceAssemblies = ReferenceAssemblies.Net.Net60
        };

        tester.ReferenceAssemblies.AddAssemblies(_references);
        tester.TestState.AdditionalReferences.Add(typeof(Contracts.Attributes.RegisterAttribute).Assembly);
        tester.TestState.AdditionalReferences.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceCollection).Assembly);

        await tester.RunAsync();
    }

    [Fact]
    public async Task CreateCompositionRoot_RegisterService_NoExistingCompositionRoot()
    {
        var code = """
using DependencyInjection.SourceGenerator.Contracts.Attributes;

namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

[Register]
public class Service : IService {}
public interface IService {}

""";

        var expected = _header + """
public static class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddQueryHandlers(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service>();

        return services;
    }
}
""";

        await RunTestAsync(code, expected);
        Assert.True(true); // silence warnings, real test happens in the RunAsync() method
    }

//    [Fact]
//    public async Task CreateCompositionRoot_RegisterService_ExistingCompositionRoot()
//    {
//        var code = """
//using DependencyInjection.SourceGenerator.Contracts.Attributes;
//using LightInject;

//namespace DependencyInjection.SourceGenerator.LightInject.Demo;

//[Register]
//public class Service : IService {}
//public interface IService {}

//public partial class CompositionRoot : ICompositionRoot
//{
//    public static void RegisterServices(IServiceRegistry serviceRegistry)
//    {
        
//    } 
//}

//""";

//        var expected = _header + """
//public partial class CompositionRoot : ICompositionRoot
//{
//    public void Compose(IServiceRegistry serviceRegistry)
//    {
//        RegisterServices(serviceRegistry);
//        serviceRegistry.Register<DependencyInjection.SourceGenerator.LightInject.Demo.IService, DependencyInjection.SourceGenerator.LightInject.Demo.Service>(new PerRequestLifeTime());
//    }
//}
//""";

//        await RunTestAsync(code, expected);
//        Assert.True(true); // silence warnings, real test happens in the RunAsync() method
//    }

//    [Fact]
//    public async Task Register_SpecifiedLifetime_And_ServiceName()
//    {
//        var code = """
//using DependencyInjection.SourceGenerator.Contracts.Attributes;
//using DependencyInjection.SourceGenerator.Contracts.Enums;

//namespace DependencyInjection.SourceGenerator.LightInject.Demo;

//[Register(Lifetime = Lifetime.Scoped, ServiceName = "Test")]
//public class Service : IService {}
//public interface IService {}

//""";

//        var expected = _header + """
//public class CompositionRoot : ICompositionRoot
//{
//    public void Compose(IServiceRegistry serviceRegistry)
//    {
//        serviceRegistry.Register<DependencyInjection.SourceGenerator.LightInject.Demo.IService, DependencyInjection.SourceGenerator.LightInject.Demo.Service>("Test", new PerScopeLifetime());
//    }
//}
//""";

//        await RunTestAsync(code, expected);
//        Assert.True(true); // silence warnings, real test happens in the RunAsync() method
//    }

//    [Fact]
//    public async Task Register_Specified_ServiceType()
//    {
//        var code = """
//using DependencyInjection.SourceGenerator.Contracts.Attributes;
//using DependencyInjection.SourceGenerator.Contracts.Enums;

//namespace DependencyInjection.SourceGenerator.LightInject.Demo;

//[Register(ServiceType = typeof(Service))]
//public class Service : IService {}
//public interface IService {}

//""";

//        var expected = _header + """
//public class CompositionRoot : ICompositionRoot
//{
//    public void Compose(IServiceRegistry serviceRegistry)
//    {
//        serviceRegistry.Register<DependencyInjection.SourceGenerator.LightInject.Demo.Service>(new PerRequestLifeTime());
//    }
//}
//""";

//        await RunTestAsync(code, expected);
//        Assert.True(true); // silence warnings, real test happens in the RunAsync() method
//    }

//    [Fact]
//    public async Task Register_NoInteface()
//    {
//        var code = """
//using DependencyInjection.SourceGenerator.Contracts.Attributes;
//using DependencyInjection.SourceGenerator.Contracts.Enums;

//namespace DependencyInjection.SourceGenerator.LightInject.Demo;

//[Register]
//public class Service {}

//""";

//        var expected = _header + """
//public class CompositionRoot : ICompositionRoot
//{
//    public void Compose(IServiceRegistry serviceRegistry)
//    {
//        serviceRegistry.Register<DependencyInjection.SourceGenerator.LightInject.Demo.Service>(new PerRequestLifeTime());
//    }
//}
//""";

//        await RunTestAsync(code, expected);
//        Assert.True(true); // silence warnings, real test happens in the RunAsync() method
//    }
}