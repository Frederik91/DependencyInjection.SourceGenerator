using Microsoft.CodeAnalysis;
using System.Collections.Immutable;
using Microsoft.CodeAnalysis.Text;
using System.Text;
using VerifyCS = DependencyInjection.SourceGenerator.Microsoft.Tests.CSharpSourceGeneratorVerifier<DependencyInjection.SourceGenerator.Microsoft.DependencyInjectionRegistrationGenerator>;
using Microsoft.CodeAnalysis.Testing;
using DependencyInjection.SourceGenerator.Microsoft;
using Microsoft.Extensions.DependencyInjection;
using NuGet.Frameworks;

namespace DependencyInjection.SourceGenerator.Microsoft.Tests;

public class DependencyInjectionRegistrationGeneratorTests
{
    private static readonly string _header = """
        // <auto-generated/>
        #pragma warning disable
        #nullable enable
        namespace DependencyInjection.SourceGenerator.Microsoft.Demo;
        using global::Microsoft.Extensions.DependencyInjection;

        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        
        """;

    private readonly ImmutableArray<string> _references = AppDomain.CurrentDomain
    .GetAssemblies()
    .Where(assembly => !assembly.IsDynamic)
    .Select(assembly => assembly.Location)
    .ToImmutableArray();

    private async Task RunTestAsync(string code, string expectedResult)
    {
        if (!NuGetFramework.Parse("net8.0").IsPackageBased)
        {
            // The NuGet version provided at runtime does not recognize the 'net6.0' target framework
            throw new NotSupportedException("The 'net8.0' target framework is not supported by this version of NuGet.");
        }

        var net8 = new ReferenceAssemblies(
            "net8.0",
            new PackageIdentity(
                "Microsoft.NETCore.App.Ref",
                "8.0.0"),
            Path.Combine("ref", "net8.0"));

        var tester = new VerifyCS.Test
        {
            TestState =
                {
                    Sources = { code },
                    GeneratedSources =
                    {
                        (typeof(DependencyInjectionRegistrationGenerator), "ServiceCollectionExtensions.g.cs",
                            SourceText.From(expectedResult, Encoding.UTF8))
                    }
                },
            ReferenceAssemblies = net8
        };

        tester.ReferenceAssemblies.AddAssemblies(_references);
        tester.TestState.AdditionalReferences.Add(typeof(Contracts.Attributes.RegisterAttribute).Assembly);
        tester.TestState.AdditionalReferences.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceCollection).Assembly);
        await tester.RunAsync();
    }

    [Fact]
    public async Task CreateCompositionRoot_RegisterService_NoExistingCompositionRoot()
    {
        var code = """
using global::DependencyInjection.SourceGenerator.Contracts.Attributes;

namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

[Register]
public class Service : IService {}
public interface IService {}

""";

        var expected = _header + """
public static class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service>();
        return services;
    }
}
""";

        await RunTestAsync(code, expected);
        Assert.True(true); // silence warnings, real test happens in the RunAsync() method
    }

    [Fact]
    public async Task Register_ScopedLifetime_And_ServiceName()
    {
        var code = """
    using DependencyInjection.SourceGenerator.Contracts.Attributes;
    using DependencyInjection.SourceGenerator.Contracts.Enums;

    namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

    [Register(Lifetime = Lifetime.Scoped, ServiceName = "Test")]
    public class Service : IService {}
    public interface IService {}

    """;

        var expected = _header + """
    public static class ServiceCollectionExtensions
    {
        public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
        {
            services.AddKeyedScoped<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service>("Test");
            return services;
        }
    }
    """;

        await RunTestAsync(code, expected);
        Assert.True(true); // silence warnings, real test happens in the RunAsync() method
    }

    [Fact]
    public async Task Register_Specified_ServiceType()
    {
        var code = """
    using DependencyInjection.SourceGenerator.Contracts.Attributes;
    using DependencyInjection.SourceGenerator.Contracts.Enums;

    namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

    [Register(ServiceType = typeof(Service))]
    public class Service : IService {}
    public interface IService {}

    """;

        var expected = _header + """
    public static class ServiceCollectionExtensions
    {
        public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
        {
            services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service>();
            return services;
        }
    }
    """;

        await RunTestAsync(code, expected);
        Assert.True(true); // silence warnings, real test happens in the RunAsync() method
    }

    [Fact]
    public async Task Register_NoInteface()
    {
        var code = """
    using DependencyInjection.SourceGenerator.Contracts.Attributes;
    using DependencyInjection.SourceGenerator.Contracts.Enums;

    namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

    [Register]
    public class Service {}

    """;

        var expected = _header + """
    public static class ServiceCollectionExtensions
    {
        public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
        {
            services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service>();
            return services;
        }
    }
    """;

        await RunTestAsync(code, expected);
        Assert.True(true); // silence warnings, real test happens in the RunAsync() method
    }
}