using Microsoft.CodeAnalysis;
using System.Collections.Immutable;
using Microsoft.CodeAnalysis.Text;
using System.Text;
using VerifyCS = DependencyInjection.SourceGenerator.Microsoft.Tests.CSharpSourceGeneratorVerifier<DependencyInjection.SourceGenerator.Microsoft.DependencyInjectionRegistrationGenerator>;
using Microsoft.CodeAnalysis.Testing;
using NuGet.Frameworks;
using FluentAssertions;
using Microsoft.CodeAnalysis.CSharp;
using System.Diagnostics;
using System.Reflection;

namespace DependencyInjection.SourceGenerator.Microsoft.Tests;

public class DependencyInjectionRegistrationGeneratorTests
{
    private static readonly string _header = """
        // <auto-generated/>
        #pragma warning disable
        #nullable enable
        namespace Microsoft.Extensions.DependencyInjection;
        using global::Microsoft.Extensions.DependencyInjection;

        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        
        """;

    private readonly ImmutableArray<string> _references = AppDomain.CurrentDomain
    .GetAssemblies()
    .Where(assembly => !assembly.IsDynamic)
    .Select(assembly => assembly.Location)
    .ToImmutableArray();

    private async Task RunTestAsync(string code, string expectedResult)
    {
        if (!NuGetFramework.Parse("net8.0").IsPackageBased)
        {
            // The NuGet version provided at runtime does not recognize the 'net6.0' target framework
            throw new NotSupportedException("The 'net8.0' target framework is not supported by this version of NuGet.");
        }

        var net8 = new ReferenceAssemblies(
            "net8.0",
            new PackageIdentity(
                "Microsoft.NETCore.App.Ref",
                "8.0.0"),
            Path.Combine("ref", "net8.0"));

        var tester = new VerifyCS.Test
        {
            TestState =
                {
                    Sources = { code },
                    GeneratedSources =
                    {
                        (typeof(DependencyInjectionRegistrationGenerator), "ServiceCollectionExtensions.g.cs",
                            SourceText.From(expectedResult, Encoding.UTF8))
                    }
                },
            ReferenceAssemblies = net8
        };

        tester.ReferenceAssemblies.AddAssemblies(_references);
        tester.TestState.AdditionalReferences.Add(typeof(global::DependencyInjection.SourceGenerator.Contracts.Attributes.RegisterAttribute).Assembly);
        tester.TestState.AdditionalReferences.Add(typeof(global::DependencyInjection.SourceGenerator.Microsoft.Contracts.Attributes.RegistrationExtensionAttribute).Assembly);
        tester.TestState.AdditionalReferences.Add(typeof(global::Microsoft.Extensions.DependencyInjection.IServiceCollection).Assembly);
        tester.TestState.AdditionalReferences.Add(typeof(global::Scrutor.RegistrationStrategy).Assembly);
        await tester.RunAsync();
    }

    [Theory]
    [InlineData("Test", "Test")]
    [InlineData("Test.abc", "TestAbc")]
    [InlineData("Test-abc", "TestAbc")]
    [InlineData("Test_abc", "TestAbc")]
    public void GetSafeMethodName(string assemblyName, string expectedMethodName)
    {
        DependencyInjectionRegistrationGenerator.EscapeAssemblyNameToMethodName(assemblyName).Should().Be(expectedMethodName);
    }

    [Fact]
    public async Task Register_DefaultValues()
    {
        var code = """
using global::DependencyInjection.SourceGenerator.Contracts.Attributes;

namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

[Register]
public class Service : IService {}
public interface IService {}

""";

        var expected = _header + """
public static partial class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service>();
        return services;
    }
}
""";

        await RunTestAsync(code, expected);
    }

    [Fact]
    public async Task Register_MultipleServices()
    {
        var code = """
using DependencyInjection.SourceGenerator.Contracts.Attributes;

namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

    [Register(ServiceType = typeof(IService1))]
    [Register(ServiceType = typeof(IService2))]
    public class Service : IService1, IService2 {}
    public interface IService1 {}
    public interface IService2 {}

""";

        var expected = _header + """
public static partial class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService1, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service>();
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService2, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service>();
        return services;
    }
}
""";

        await RunTestAsync(code, expected);
    }

    [Fact]
    public void Register_UndefinedService()
    {
        var code = """
using global::DependencyInjection.SourceGenerator.Contracts.Attributes;

namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

public class Base {}

[Register]
public class Service1 : Base, IService {}

[Register<IService>]
public class Service2 : IService {}

[Register(typeof(IService))]
public class Service3 : IService {}

""";

        var expected = _header + """
public static partial class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service1>();
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service2>();
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service3>();
        return services;
    }
}
""";
        List<MetadataReference> references = [];
        var assemblies = AppDomain.CurrentDomain.GetAssemblies();

        foreach (Assembly assembly in assemblies)
        {
            if (!assembly.IsDynamic)
            {
                references.Add(MetadataReference.CreateFromFile(assembly.Location));
            }
        }

        var syntax = CSharpSyntaxTree.ParseText(code);

        var compilation = CSharpCompilation.Create(
            "TestProject",
            syntaxTrees: [syntax],
            references: references,
            options: new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

        var driver = CSharpGeneratorDriver
            .Create(new DependencyInjectionRegistrationGenerator());

        driver.RunGeneratorsAndUpdateCompilation(
            compilation,
            out Compilation outputCompilation,
            out ImmutableArray<Diagnostic> diagnostics);

        var generatedSource = outputCompilation.SyntaxTrees.Last().ToString();

        generatedSource.Should().Be(expected);
    }

    [Fact]
    public async Task Register_ScopedLifetime_And_ServiceName()
    {
        var code = """
    using DependencyInjection.SourceGenerator.Contracts.Attributes;
    using DependencyInjection.SourceGenerator.Contracts.Enums;

    namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

    [Register(Lifetime = Lifetime.Scoped, ServiceName = "Test")]
    public class Service : IService {}
    public interface IService {}

    """;

        var expected = _header + """
    public static partial class ServiceCollectionExtensions
    {
        public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
        {
            services.AddKeyedScoped<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service>("Test");
            return services;
        }
    }
    """;

        await RunTestAsync(code, expected);
    }

    [Fact]
    public async Task Register_Specified_ServiceType()
    {
        var code = """
    using DependencyInjection.SourceGenerator.Contracts.Attributes;
    using DependencyInjection.SourceGenerator.Contracts.Enums;

    namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

    [Register(ServiceType = typeof(Service<string>))]
    public class Service<T> : IService {}
    public interface IService {}

    """;

        var expected = _header + """
    public static partial class ServiceCollectionExtensions
    {
        public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
        {
            services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service<string>>();
            return services;
        }
    }
    """;

        await RunTestAsync(code, expected);
    }

    [Fact]
    public async Task Register_NoInteface_Or_BaseClass()
    {
        var code = """
    using DependencyInjection.SourceGenerator.Contracts.Attributes;
    using DependencyInjection.SourceGenerator.Contracts.Enums;

    namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

    [Register]
    public class Service {}

    """;

        var expected = _header + """
    public static partial class ServiceCollectionExtensions
    {
        public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
        {
            services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service>();
            return services;
        }
    }
    """;

        await RunTestAsync(code, expected);
    }

    [Fact]
    public async Task Register_Specified_ServiceType_UsingGeneric()
    {
        var code = """
using global::DependencyInjection.SourceGenerator.Contracts.Attributes;

namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

[Register<IService2>]
public class Service : IService1, IService2 {}
public interface IService1 {}
public interface IService2 {}

""";

        var expected = _header + """
public static partial class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService2, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service>();
        return services;
    }
}
""";

        await RunTestAsync(code, expected);
    }

    [Fact]
    public async Task Decorate_DefaultValues()
    {
        var code = """
using global::DependencyInjection.SourceGenerator.Contracts.Attributes;

namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

[Decorate]
public class Service : IService {}
public interface IService {}

""";

        var expected = _header + """
public static partial class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.Decorate<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service>();
        return services;
    }
}
""";

        await RunTestAsync(code, expected);
    }

    [Fact]
    public async Task Decorate_Specified_ServiceType()
    {
        var code = """
using global::DependencyInjection.SourceGenerator.Contracts.Attributes;

namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

[Decorate(ServiceType = typeof(IService2))]
public class Service : IService1, IService2 {}
public interface IService1 {}
public interface IService2 {}

""";

        var expected = _header + """
public static partial class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.Decorate<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService2, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service>();
        return services;
    }
}
""";

        await RunTestAsync(code, expected);
    }

    [Fact]
    public async Task Decorate_Specified_ServiceType_UsingGeneric()
    {
        var code = """
using global::DependencyInjection.SourceGenerator.Contracts.Attributes;

namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

[Decorate<IService2>]
public class Service : IService1, IService2 {}
public interface IService1 {}
public interface IService2 {}

""";

        var expected = _header + """
public static partial class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.Decorate<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService2, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service>();
        return services;
    }
}
""";

        await RunTestAsync(code, expected);
    }

    [Fact]
    public async Task Register_FromRegistrator()
    {
        var code = """
using global::DependencyInjection.SourceGenerator.Microsoft.Contracts.Attributes;
using global::DependencyInjection.SourceGenerator.Contracts.Attributes;

namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

public class Registrator
{
    [RegistrationExtension]
    internal static void Register(global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
    }
}

""";

        var expected = _header + """
public static partial class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        global::DependencyInjection.SourceGenerator.Microsoft.Demo.Registrator.Register(services);
        return services;
    }
}
""";

        await RunTestAsync(code, expected);
    }


    [Fact]
    public async Task RegisterAll_ByInterface()
    {
        var code = """
using global::DependencyInjection.SourceGenerator.Contracts.Attributes;

[assembly: RegisterAll<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IServiceA>]
[assembly: RegisterAll<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IServiceB>]

namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

public class ServiceA1 : IServiceA {}
public class ServiceA2 : IServiceA {}
public interface IServiceA {}

public class ServiceB1 : IServiceB {}
public class ServiceB2 : IServiceB {}
public interface IServiceB {}

""";

        var expected = _header + """
public static partial class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IServiceA, global::DependencyInjection.SourceGenerator.Microsoft.Demo.ServiceA2>();
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IServiceA, global::DependencyInjection.SourceGenerator.Microsoft.Demo.ServiceA1>();
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IServiceB, global::DependencyInjection.SourceGenerator.Microsoft.Demo.ServiceB2>();
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IServiceB, global::DependencyInjection.SourceGenerator.Microsoft.Demo.ServiceB1>();
        return services;
    }
}
""";

        await RunTestAsync(code, expected);
    }


    [Fact]
    public async Task RegisterAll_SpecifyLifetime()
    {
        var code = """
using global::DependencyInjection.SourceGenerator.Contracts.Attributes;
using global::DependencyInjection.SourceGenerator.Contracts.Enums;

[assembly: RegisterAll<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService>(Lifetime = Lifetime.Singleton)]

namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

public class Service1 : IService {}
public class Service2 : IService {}
public interface IService {}

""";

        var expected = _header + """
public static partial class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.AddSingleton<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service2>();
        services.AddSingleton<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service1>();
        return services;
    }
}
""";

        await RunTestAsync(code, expected);
    }

    [Fact]
    public async Task RegisterAll_ByBaseType_WithServiceName()
    {
        var code = """
using global::DependencyInjection.SourceGenerator.Contracts.Attributes;

[assembly: RegisterAll<global::DependencyInjection.SourceGenerator.Microsoft.Demo.MyBase>(IncludeServiceName = true)]

namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

public class Service1 : MyBase {}
public class Service2 : MyBase {}
public abstract class MyBase {}

""";

        var expected = _header + """
public static partial class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.AddKeyedTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.MyBase, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service2>("Service2");
        services.AddKeyedTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.MyBase, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service1>("Service1");
        return services;
    }
}
""";

        await RunTestAsync(code, expected);
    }

    [Fact]
    public async Task RegisterAll_ByBaseType_WithoutServiceName()
    {
        var code = """
using global::DependencyInjection.SourceGenerator.Contracts.Attributes;

[assembly: RegisterAll<global::DependencyInjection.SourceGenerator.Microsoft.Demo.MyBase>]

namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

public class Service1 : MyBase {}
public class Service2 : MyBase {}
public abstract class MyBase {}

""";

        var expected = _header + """
public static partial class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.MyBase, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service2>();
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.MyBase, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service1>();
        return services;
    }
}
""";

        await RunTestAsync(code, expected);
    }

    [Fact]
    public async Task RegisterAll_GenericInterfaceType()
    {
        var code = """
using global::DependencyInjection.SourceGenerator.Contracts.Attributes;
using global::DependencyInjection.SourceGenerator.Microsoft.Demo;

[assembly: RegisterAll(typeof(IService<>))]

namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

public interface IDummy { }
public interface IService<TType> { }
public class Service1 : IDummy, IService<string> {}
public class Service2 : IService<int> {}

""";

        var expected = _header + """
public static partial class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService<int>, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service2>();
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.IService<string>, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service1>();
        return services;
    }
}
""";

        await RunTestAsync(code, expected);
    }

    [Fact]
    public async Task RegisterAll_GenericBaseType()
    {
        var code = """
using global::DependencyInjection.SourceGenerator.Contracts.Attributes;
using global::DependencyInjection.SourceGenerator.Microsoft.Demo;

[assembly: RegisterAll(typeof(Base<>))]

namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

public abstract class Base<TType> { }
public class Service1 : Base<string> {}
public class Service2 : Base<int> {}

""";

        var expected = _header + """
public static partial class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.Base<int>, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service2>();
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.Base<string>, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service1>();
        return services;
    }
}
""";

        await RunTestAsync(code, expected);
    }


    [Fact]
    public async Task RegisterAll_GenericBaseClassType()
    {
        var code = """
using global::DependencyInjection.SourceGenerator.Contracts.Attributes;
using global::DependencyInjection.SourceGenerator.Microsoft.Demo;

[assembly: RegisterAll(typeof(BaseType<>))]

namespace DependencyInjection.SourceGenerator.Microsoft.Demo;

public abstract class MyType : BaseType<string> { }
public abstract class BaseType<TType> { }
public class Service : MyType {}

""";

        var expected = _header + """
public static partial class ServiceCollectionExtensions
{
    public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddTestProject(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)
    {
        services.AddTransient<global::DependencyInjection.SourceGenerator.Microsoft.Demo.BaseType<string>, global::DependencyInjection.SourceGenerator.Microsoft.Demo.Service>();
        return services;
    }
}
""";

        await RunTestAsync(code, expected);
    }
}