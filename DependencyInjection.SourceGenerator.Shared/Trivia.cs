using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Text;

namespace DependencyInjection.SourceGenerator.Shared;
internal static class Trivia
{
    internal static AttributeListSyntax CreateExcludeFromCodeCoverage()
    {
        return SyntaxFactory.AttributeList(
                SyntaxFactory.SingletonSeparatedList(
                    SyntaxFactory.Attribute(
                        SyntaxFactory.QualifiedName(
                            SyntaxFactory.QualifiedName(
                                SyntaxFactory.QualifiedName(
                                    SyntaxFactory.AliasQualifiedName(
                                        SyntaxFactory.IdentifierName(
                                            SyntaxFactory.Token(SyntaxKind.GlobalKeyword)),
                                        SyntaxFactory.IdentifierName("System")),
                                    SyntaxFactory.IdentifierName("Diagnostics")),
                                SyntaxFactory.IdentifierName("CodeAnalysis")),
                            SyntaxFactory.IdentifierName("ExcludeFromCodeCoverage")))));
    }

    internal static SyntaxToken CreateTrivia()
    {
        return SyntaxFactory.Token(
                SyntaxFactory.TriviaList(
                    [
                        SyntaxFactory.Comment("// <auto-generated/>"),
                        SyntaxFactory.Trivia(
                            SyntaxFactory.PragmaWarningDirectiveTrivia(
                                SyntaxFactory.Token(SyntaxKind.DisableKeyword),
                                true)),
                        SyntaxFactory.Trivia(
                            SyntaxFactory.NullableDirectiveTrivia(
                                SyntaxFactory.Token(SyntaxKind.EnableKeyword),
                                true))
                    ]),
                SyntaxKind.NamespaceKeyword,
                SyntaxFactory.TriviaList());
    }

    internal static CompilationUnitSyntax CreateCompilationUnitSyntax(ClassDeclarationSyntax classDeclaration, string @namespace, UsingDirectiveSyntax[]? usings = null)
    {
        var excludeFromCodeCoverageSyntax = CreateExcludeFromCodeCoverage();
        classDeclaration = classDeclaration.AddAttributeLists(excludeFromCodeCoverageSyntax);

        var trivia = Trivia.CreateTrivia();
        var namespaceDeclaration = SyntaxFactory.FileScopedNamespaceDeclaration(SyntaxFactory.IdentifierName(@namespace))
                .WithNamespaceKeyword(trivia);

        if (usings is not null)
            namespaceDeclaration = namespaceDeclaration.AddUsings(usings);

        namespaceDeclaration = namespaceDeclaration.AddMembers(classDeclaration);

        return SyntaxFactory.CompilationUnit()
            .AddMembers(namespaceDeclaration)
            .NormalizeWhitespace();
    }
}
